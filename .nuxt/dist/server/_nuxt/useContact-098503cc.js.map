{"version":3,"file":"useContact-098503cc.js","sources":["../../../../node_modules/nuxt/dist/app/composables/state.js","../../../../src/composables/useContact.ts"],"sourcesContent":["import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxt = useNuxtApp();\n  const state = toRef(nuxt.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxt.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : Array.isArray(keys) ? keys : [keys];\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","export const useContact = () => {\n  const contactState = useState(\"contact\", () => {\n    return {\n      parentName: \"\",\n      parentNameKana: \"\",\n      childName: \"\",\n      childNameKana: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      schoolName: \"\",\n      grade: \"\",\n      messagAssignment: \"\",\n      messageDocument: \"\",\n    };\n  });\n\n  const setContact = (contact: any) => {\n    contactState.value = contact;\n  };\n\n  const send = async () => {\n    const formData = new FormData();\n    Object.entries(contactState.value).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n\n    await fetch(\"https://nogami-test.form.newt.so/v1/0teHx56Yc\", {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        Accept: \"application/json\",\n      },\n    });\n  };\n\n  return {\n    contactState: readonly(contactState),\n    setContact,\n    send,\n  };\n};\n"],"names":[],"mappings":";;AAEA,MAAM,oBAAoB;AACnB,SAAS,YAAY,MAAM;AAChC,QAAM,UAAU,OAAO,KAAK,KAAK,SAAS,CAAC,MAAM,WAAW,KAAK,IAAK,IAAG;AACzE,MAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAC/B,SAAK,QAAQ,OAAO;AAAA,EACrB;AACD,QAAM,CAAC,MAAM,IAAI,IAAI;AACrB,MAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACrC,UAAM,IAAI,UAAU,6CAA6C,IAAI;AAAA,EACtE;AACD,MAAI,SAAS,UAAU,OAAO,SAAS,YAAY;AACjD,UAAM,IAAI,MAAM,gDAAgD,IAAI;AAAA,EACrE;AACD,QAAM,MAAM,oBAAoB;AAChC,QAAM,OAAO;AACb,QAAM,QAAQ,MAAM,KAAK,QAAQ,OAAO,GAAG;AAC3C,MAAI,MAAM,UAAU,UAAU,MAAM;AAClC,UAAM,eAAe;AACrB,QAAI,MAAM,YAAY,GAAG;AACvB,WAAK,QAAQ,MAAM,GAAG,IAAI;AAC1B,aAAO;AAAA,IACR;AACD,UAAM,QAAQ;AAAA,EACf;AACD,SAAO;AACT;AC3BO,MAAM,aAAa,MAAM;AACxB,QAAA,eAAe,SAAS,WAAW,MAAM;AACtC,WAAA;AAAA,MACL,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,WAAW;AAAA,MACX,eAAe;AAAA,MACf,OAAO;AAAA,MACP,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,kBAAkB;AAAA,MAClB,iBAAiB;AAAA,IAAA;AAAA,EACnB,CACD;AAEK,QAAA,aAAa,CAAC,YAAiB;AACnC,iBAAa,QAAQ;AAAA,EAAA;AAGvB,QAAM,OAAO,YAAY;AACjB,UAAA,WAAW,IAAI;AACd,WAAA,QAAQ,aAAa,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAClD,eAAA,OAAO,KAAK,KAAK;AAAA,IAAA,CAC3B;AAED,UAAM,MAAM,iDAAiD;AAAA,MAC3D,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IAAA,CACD;AAAA,EAAA;AAGI,SAAA;AAAA,IACL,cAAc,SAAS,YAAY;AAAA,IACnC;AAAA,IACA;AAAA,EAAA;AAEJ;","x_google_ignoreList":[0]}